@{
    ViewData["Title"] = "Chi tiết mô phỏng";
}
<style>
    .video-container {
        position: relative;
        width: 50em;
        max-width: 100%;
        margin-bottom: 1em;
    }

    video {
        width: 100%;
        display: block;
    }

    canvas#timeline {
        position: absolute;
        left: 0;
        bottom: 1.2em;
        width: 100%;
        height: 20px;
        /* Đã tăng chiều cao để có thể vẽ lá cờ lớn hơn */
        pointer-events: none;
        background: transparent;
    }

    .controls {
        text-align: center;
    }

    button {
        background-color: #444;
        color: white;
        border: none;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        border-radius: 5px;
        transition: background-color 0.2s;
    }

        button:hover {
            background-color: #666;
        }

    video::-webkit-media-controls-play-button {
        display: none !important;
    }

    video::-webkit-media-controls-mute-button {
        display: none !important;
    }

    video::-webkit-media-controls-volume-slider {
        display: none !important;
    }

    video::-webkit-media-controls-fullscreen-button {
        display: none !important;
    }

    video::-webkit-media-controls-time-remaining-display {
        display: none !important;
    }
</style>
<div class="container-xl">
    <div class="row" id="license-info-container">
        <div class="col-12">
            <div class="license-info">
                <div class="loading">
                    <div class="loading-spinner"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Left sidebar with list of questions -->
        <div class="col-md-3">
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Chọn Bài Ôn</h5>
                </div>
                <div class="card-body p-0">
                    <div id="moPhongList" class="list-group list-group-flush">
                        <div class="loading">
                            <div class="loading-spinner"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right side with current question content and video -->
        <div class="col-md-9">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Bài Mô phỏng</h5>
                </div>
                <div class="card-body">
                    <div id="contentArea">
                        <div class="loading">
                            <div class="loading-spinner"></div>
                            <div class="video-container">
                                <video id="video" controls autoplay muted>
                                    Trình duyệt của bạn không hỗ trợ video.
                                </video>
                                <canvas id="timeline"></canvas>
                            </div>

                            <div class="controls">
                                <button id="resetBtn">🔁 Làm lại</button>
                            </div>
                            <h1 id="score"></h1>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>

    const video = document.getElementById("video");
    const canvas = document.getElementById("timeline");
    const ctx = canvas.getContext("2d");
    const resetBtn = document.getElementById("resetBtn");
        const predefinedMarkers = [];

    // Define the colors and scores you want to use
    const colors = ['green', 'red', 'yellow', 'blue', 'purple'];
    const scores = [5, 4, 3, 2, 1];
    let readyToDraw = false;
    let userMarked = false;
        const id = new URLSearchParams(window.location.search).get("id"); // Lấy ID từ URL
        const moPhongId = new URLSearchParams(window.location.search).get("moPhongId");

    if (moPhongId) {
      fetch(`/api/MoPhong/${moPhongId}`)
        .then(res => res.json())
        .then(data => {
          if (data.status && data.data) {
            const { noiDung, videoUrl ,dapAn} = data.data;
            document.getElementById("video").src = videoUrl;
                const numbers = dapAn.split(',').map(num => parseInt(num.trim()));
    // Populate the predefinedMarkers array
    for (let i = 0; i < numbers.length - 1; i++) {
      predefinedMarkers.push({
        start: numbers[i],
        end: numbers[i + 1],
        score: scores[i],
        color: colors[i % colors.length]
      });
    }

    console.log(predefinedMarkers);
          } else {
            console.warn("Không tìm thấy dữ liệu mô phỏng");
          }
        })
        .catch(err => console.error("Lỗi khi tải mô phỏng:", err));
    }
    fetch(`/api/MoPhong/get-mo-phong-by-loai-bang-lai?id=${id}`)
      .then(response => response.json())
      .then(data => {
        const moPhongList = data.data;
        const moPhongListContainer = document.getElementById("moPhongList"); // Đảm bảo có thẻ này

        if (moPhongList && moPhongList.length > 0) {
          moPhongList.forEach(moPhong => {
            const listItem = document.createElement("a");
            listItem.href = `/MoPhong/Details?id=${id}&moPhongId=${moPhong.id}`;
            listItem.className = "list-group-item list-group-item-action";
            listItem.innerText = moPhong.noiDung || "Không có nội dung";
            moPhongListContainer.appendChild(listItem);
          });
        } else {
          moPhongListContainer.innerHTML = `<div class="p-3 text-muted">Không có mô phỏng nào</div>`;
        }
      })
      .catch(error => {
        console.error('Error fetching license name:', error);
        document.getElementById("license-name").innerText = "Không thể tải tên loại bằng lái";
      });
    // // Các marker có sẵn
    // const predefinedMarkers = [
    //   { start: 2, end: 4, color: 'green', score: 1 },
    //   { start: 4, end: 6, color: 'red', score: 2 },
    //   { start: 6, end: 8, color: 'yellow', score: 3 },
    //   { start: 8, end: 10, color: 'blue', score: 4 },
    //   { start: 10, end: 12, color: 'purple', score: 5 }
    // ];
    let userScore = 0;
    // Mảng để lưu các marker do người dùng tạo bằng phím Space
    const userMarkers = [];

    // Chỉ cần gọi 1 lần khi trang load
    video.addEventListener("loadedmetadata", () => {
      canvas.width = canvas.offsetWidth;
      canvas.height = 20; // Đảm bảo chiều cao đủ để vẽ lá cờ
      readyToDraw = true;
    });

    // Cập nhật kích thước canvas khi cửa sổ thay đổi kích thước
    window.addEventListener("resize", () => {
      canvas.width = canvas.offsetWidth;
      canvas.height = 20;
      if (readyToDraw) {
        drawMarkers();
      }
    });

    // Sau khi tua về đầu, cho phép vẽ lại
    video.addEventListener("seeked", () => {
      readyToDraw = true;
    });

    document.addEventListener("keydown", (e) => {
      if (e.code === "Space") {
        e.preventDefault();
        if (readyToDraw) {
          predefinedMarkers.forEach(marker => {
            // Kiểm tra nếu thời gian hiện tại nằm trong khoảng của marker
            if (video.currentTime >= marker.start && video.currentTime <= marker.end) {
              userScore += marker.score; // Cộng điểm nếu có marker trùng khớp
            }
          });
          // Thêm marker mới tại vị trí hiện tại
          addUserMarker(video.currentTime);
          // Vẽ lại tất cả markers
          drawMarkers();
          userMarked = true;
          document.getElementById("score").innerText = `Điểm Của Bạn: ${userScore}`;
        }
      }
      if (userMarked) {
        readyToDraw = false; // Ngăn không cho vẽ lại khi đã đánh dấu
      }
    });

    resetBtn.addEventListener("click", () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      readyToDraw = false;
      video.currentTime = 0;
      video.play();
      // Xóa tất cả marker của người dùng
      userScore = 0;
      document.getElementById("score").innerText = ``;
      userMarkers.length = 0;
      userMarked = true;
    });

    function addUserMarker(time) {
      // Thêm marker mới vào danh sách
      userMarkers.push({
        time: time,
        color: '#FF0000'
      });
    }

    function drawMarkers() {
      const duration = video.duration;
      const width = canvas.width;
      const height = canvas.height;

      ctx.clearRect(0, 0, width, height);

      // Vẽ các marker có sẵn
      predefinedMarkers.forEach(marker => {
        const xStart = (marker.start / duration) * width;
        const xEnd = (marker.end / duration) * width;
        ctx.fillStyle = marker.color;
        ctx.fillRect(xStart, height - 5, xEnd - xStart, 5); // Chỉ vẽ ở phần dưới của canvas
      });

      // Vẽ các marker người dùng đã đặt
      userMarkers.forEach(marker => {
        const x = (marker.time / duration) * width;
        const flagColor = marker.color;

        // Vẽ cột cờ
        ctx.fillStyle = '#FF0000';
        ctx.fillRect(x - 1, 0, 2, height - 5);

        // Vẽ lá cờ (hình chữ nhật)
        ctx.fillStyle = flagColor;
        ctx.fillRect(x, 0, 15, 10);

        // Đánh dấu điểm trên thanh timeline
        ctx.fillStyle = '#FFFFFF';
        ctx.beginPath();
        ctx.arc(x, height - 2.5, 3, 0, Math.PI * 2);
        ctx.fill();
      });
    }

</script>
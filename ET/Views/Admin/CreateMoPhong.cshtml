    @{
        Layout = "~/Views/Shared/_AdminLayout.cshtml";
    }

    <div class="container-fluid">
        <div class="row mb-3">
            <div class="col">
                <h2>Thêm mô phỏng mới</h2>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <form id="moPhongForm">
                    <div class="mb-3">
                        <label for="noiDung" class="form-label">Nội dung <span class="text-danger">*</span></label>
                        <textarea class="form-control" id="noiDung" rows="4" required></textarea>
                    </div>

                    <div class="mb-3">
                        <label for="videoFile" class="form-label">Video <span class="text-danger">*</span></label>
                        <input type="file" class="form-control" id="videoFile" accept="video/mp4,video/webm,video/ogg,video/quicktime">
                        <div class="form-text">Chọn file video (MP4, WebM, OGG, MOV)</div>
                        <input type="hidden" id="videoUrl">
                        <div id="videoUploadProgress" class="progress mt-2" style="display: none;">
                            <div class="progress-bar" role="progressbar" style="width: 0%"></div>
                        </div>
                        <div id="videoPreviewContainer" class="mt-2 video-container" style="display: none;">
                            <video id="videoPreview" controls style="width: 100%; height: auto;"></video>
                            <figcaption class="progress-container">
                                <label id="timer" for="progress" role="timer">00:00</label>
                                <div class="markers-container">
                                    <progress id="progress" max="100" value="0">Progress</progress>
                                    <div id="markers"></div>
                                </div>
                            </figcaption>
                        </div>
                        <div class="controls mt-2">
                            <button type="button" id="resetMarkersBtn" class="btn btn-warning" style="display: none;">
                                <i class="bi bi-arrow-repeat"></i> Làm lại mốc thời gian
                            </button>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="dapAn" class="form-label">Đáp án <span class="text-danger">*</span></label>
                        <textarea class="form-control" id="dapAn" rows="3" readonly></textarea>
                        <div class="form-text">Nhấn phím cách (Space) để chọn 6 mốc thời gian. Đáp án sẽ tự động cập nhật.</div>
                    </div>

                    <div class="mb-3">
                        <label for="loaiBangLaiId" class="form-label">Loại bằng lái <span class="text-danger">*</span></label>
                        <select class="form-select" id="loaiBangLaiId" required></select>
                    </div>

                    <div class="d-flex justify-content-between">
                        <a href="/Admin/QLMoPhong" class="btn btn-secondary">
                            <i class="bi bi-arrow-left"></i> Quay lại
                        </a>
                        <button type="button" id="btnSave" class="btn btn-primary">
                            <i class="bi bi-save"></i> Lưu
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        .video-container {
            position: relative;
            width: 100%;
            max-width: 800px;
            max-height: 400px;
            margin-bottom: 1em;
            overflow: hidden;
        }

        #videoPreview {
            width: 100%;
            height: auto;
            max-height: 300px;
            object-fit: contain;
            display: block;
        }

        .progress-container {
            align-items: center;
            background: #eaeaea;
            padding: 0.5rem;
            position: relative;
        }

        .markers-container {
            position: relative;
            width: 100%;
            height: 20px;
        }

        #progress {
            appearance: none;
            border: none;
            border-radius: 3px;
            box-shadow: 0 2px 3px rgba(0, 0, 0, 0.25) inset;
            color: dodgerblue;
            display: block;
            height: 15px;
            width: 100%;
            margin: 0;
        }

            #progress::-webkit-progress-bar {
                background-color: whiteSmoke;
                border-radius: 3px;
                box-shadow: 0 2px 3px rgba(0, 0, 0, 0.25) inset;
            }

            #progress::-webkit-progress-value {
                background-image: linear-gradient(to right, #ff8a00, #e52e71);
                border-radius: 3px;
                transition: width 0.1s linear;
            }

            #progress::-moz-progress-bar {
                background-image: -moz-linear-gradient(to right, #ff8a00, #e52e71);
                border-radius: 3px;
                transition: width 0.1s linear;
            }

        #markers {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 15px;
            pointer-events: none;
        }

        .marker {
            position: absolute;
            width: 2px;
            height: 15px;
            background-color: #FF0000;
            transform: translateX(-50%);
        }

            .marker::after {
                content: '';
                position: absolute;
                top: -5px;
                left: -3px;
                width: 8px;
                height: 8px;
                background-color: #FFFFFF;
                border-radius: 50%;
                border: 1px solid #FF0000;
            }

        #timer {
            text-align: center;
            display: block;
            margin-bottom: 5px;
        }
    </style>

<script>
    $(document).ready(function () {
        // Tải danh sách loại bằng lái
        loadLoaiBangLai();

        // Khởi tạo các biến
        const video = document.getElementById("videoPreview");
        const progress = document.getElementById("progress");
        const timer = document.getElementById("timer");
        const markersContainer = document.getElementById("markers");
        const resetMarkersBtn = document.getElementById("resetMarkersBtn");
        const colors = ['green', 'red', 'yellow', 'blue', 'purple'];
        const scores = [5, 4, 3, 2, 1];
        let userMarkers = [];
        let predefinedMarkers = [];
        let readyToDraw = false;

        // Cập nhật tiến trình video
        function progressLoop() {
            setInterval(function () {
                if (video.duration > 0 && !isNaN(video.duration)) {
                    progress.value = (video.currentTime / video.duration) * 100;
                    const minutes = Math.floor(video.currentTime / 60);
                    const seconds = Math.floor(video.currentTime % 60);
                    timer.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                }
            }, 100);
        }

        // Xử lý sự kiện khi chọn file video
        $('#videoFile').change(function () {
            const file = this.files[0];
            if (file) {
                const videoUrl = URL.createObjectURL(file);
                $('#videoPreview').attr('src', videoUrl);
                $('#videoPreviewContainer').show();
                $('#resetMarkersBtn').show();

                // Upload file
                uploadVideo(file);

                // Khởi tạo khi video được tải
                video.addEventListener("loadedmetadata", () => {
                    console.log("Video dimensions:", video.videoWidth, video.videoHeight);
                    readyToDraw = true;
                    userMarkers = [];
                    predefinedMarkers = [];
                    $('#dapAn').val('');
                    drawMarkers();
                    progressLoop();
                }, { once: true });

                // Cập nhật khi cửa sổ thay đổi
                window.addEventListener("resize", () => {
                    if (readyToDraw) {
                        drawMarkers();
                    }
                });
            }
        });

        // Xử lý sự kiện phím cách để đánh dấu mốc thời gian
        document.addEventListener("keydown", (e) => {
            const tag = e.target.tagName.toLowerCase();
            const isTyping = tag === 'input' || tag === 'textarea' || e.target.isContentEditable;
            if (isTyping) return; // Đang gõ trong ô nhập liệu, bỏ qua

            if (e.code === "Space") {
                e.preventDefault();
                if (!readyToDraw) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Video chưa sẵn sàng',
                        text: 'Vui lòng chờ video tải hoàn tất!'
                    });
                    return;
                }
                if (userMarkers.length >= 6) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Đã đủ mốc',
                        text: 'Bạn đã chọn đủ 6 mốc thời gian!'
                    });
                    return;
                }

                const currentTime = video.currentTime;
                userMarkers.push(currentTime);
                userMarkers.sort((a, b) => a - b);

                predefinedMarkers = [];
                for (let i = 0; i < userMarkers.length - 1; i++) {
                    predefinedMarkers.push({
                        start: userMarkers[i],
                        end: userMarkers[i + 1],
                        score: scores[i],
                        color: colors[i % colors.length]
                    });
                }

                $('#dapAn').val(userMarkers.join(','));
                drawMarkers();
            }
        });

        // Xử lý nút làm lại mốc thời gian
        resetMarkersBtn.addEventListener("click", () => {
            userMarkers = [];
            predefinedMarkers = [];
            $('#dapAn').val('');
            markersContainer.innerHTML = '';
            video.currentTime = 0;
            video.play();
            drawMarkers();
        });

        // Xử lý sự kiện nút Lưu
        $('#btnSave').click(function () {
            saveMoPhong();
        });

        // Hàm vẽ các marker
        function drawMarkers() {
            const duration = video.duration || 1;
            if (isNaN(duration) || duration <= 0) {
                return; // Không vẽ nếu duration không hợp lệ
            }

            // Xóa các marker cũ
            markersContainer.innerHTML = '';

            // Vẽ các marker
            userMarkers.forEach(time => {
                const marker = document.createElement('span');
                marker.className = 'marker';
                const position = (time / duration) * 100;
                marker.style.left = `${position}%`;
                markersContainer.appendChild(marker);
            });

            // Vẽ các khoảng màu (nếu cần)
            predefinedMarkers.forEach(marker => {
                const range = document.createElement('div');
                range.style.position = 'absolute';
                range.style.backgroundColor = marker.color;
                range.style.opacity = '0.5';
                range.style.height = '5px';
                range.style.bottom = '0';
                const startPos = (marker.start / duration) * 100;
                const endPos = (marker.end / duration) * 100;
                range.style.left = `${startPos}%`;
                range.style.width = `${endPos - startPos}%`;
                markersContainer.appendChild(range);
            });
        }

        // Hàm upload video
        function uploadVideo(file) {
            const formData = new FormData();
            formData.append('file', file);

            $('#videoUploadProgress').show();

            fetch('/api/Upload/upload-video', {
                method: 'POST',
                body: formData,
                headers: {
                    'Authorization': 'Bearer ' + getToken()
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Không thể upload video');
                    }
                    return response.json();
                })
                .then(response => {
                    if (response.status) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Upload thành công',
                            text: 'Video đã được tải lên thành công',
                            timer: 1500,
                            showConfirmButton: false
                        });
                        $('#videoUrl').val(response.filePath);
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Lỗi',
                            text: response.message || 'Không thể upload video'
                        });
                    }
                })
                .catch(error => {
                    console.error('Upload video error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi',
                        text: error.message || 'Đã xảy ra lỗi khi upload video'
                    });
                })
                .finally(() => {
                    setTimeout(() => {
                        $('#videoUploadProgress').hide();
                    }, 1000);
                });
        }

        // Hàm tải danh sách loại bằng lái
        function loadLoaiBangLai() {
            fetch('/api/loaibanglai/get-loai-bang-lai-list', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + getToken()
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Không thể tải danh sách loại bằng lái');
                    }
                    return response.json();
                })
                .then(response => {
                    if (response.status && response.data) {
                        $('#loaiBangLaiId').empty();
                        $('#loaiBangLaiId').append('<option value="">-- Chọn loại bằng lái --</option>');
                        $.each(response.data, function (index, item) {
                            $('#loaiBangLaiId').append(`<option value="${item.id}">${item.tenLoai}</option>`);
                        });
                    }
                })
                .catch(error => {
                    console.error('Error loading loai bang lai:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi',
                        text: 'Không thể tải danh sách loại bằng lái'
                    });
                });
        }

        // Hàm lưu mô phỏng mới
        function saveMoPhong() {
            if (!validateForm()) {
                return;
            }

            const moPhong = {
                id: '00000000-0000-0000-0000-000000000000',
                noiDung: $('#noiDung').val(),
                videoUrl: $('#videoUrl').val(),
                dapAn: $('#dapAn').val(),
                loaiBangLaiId: $('#loaiBangLaiId').val()
            };

            fetch('/api/mophong/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + getToken()
                },
                body: JSON.stringify(moPhong)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Không thể lưu mô phỏng');
                    }
                    return response.json();
                })
                .then(response => {
                    if (response.status) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Thành công',
                            text: 'Thêm mô phỏng mới thành công',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.href = '/Admin/QLMoPhong';
                            }
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Lỗi',
                            text: response.message || 'Không thể lưu mô phỏng'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error saving mo phong:', error);
                    let errorMsg = error.message || 'Đã xảy ra lỗi khi lưu mô phỏng';
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi',
                        html: errorMsg
                    });
                });
        }

        // Kiểm tra form
        function validateForm() {
            const noiDung = $('#noiDung').val();
            const videoUrl = $('#videoUrl').val();
            const dapAn = $('#dapAn').val();
            const loaiBangLaiId = $('#loaiBangLaiId').val();

            if (!noiDung) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi',
                    text: 'Vui lòng nhập nội dung mô phỏng'
                });
                return false;
            }

            if (!videoUrl) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi',
                    text: 'Vui lòng chọn và upload video'
                });
                return false;
            }

            if (!dapAn || userMarkers.length !== 6) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi',
                    text: 'Vui lòng chọn đúng 6 mốc thời gian cho đáp án'
                });
                return false;
            }

            if (!loaiBangLaiId) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi',
                    text: 'Vui lòng chọn loại bằng lái'
                });
                return false;
            }

            return true;
        }

        function getToken() {
            return localStorage.getItem('jwtToken') || '';
        }
    });
</script>